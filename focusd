#!/usr/bin/env python3.6
#
# This file is part of rasa-focusd.
#
# rasa-focusd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rasa-focusd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rasa-focusd.  If not, see <http://www.gnu.org/licenses/>.

"""Daemon for controlling an Optec Focus Lynx focuser via Pyro"""

# pylint: disable=too-many-return-statements
# pylint: disable=too-many-branches

import argparse
import datetime
import sys
import threading
import traceback
import serial
import Pyro4
from warwick.observatory.common import (
    log,
    TryLock)
from warwick.observatory.common.helpers import pyro_client_matches
from warwick.rasa.focuser import (
    CommandStatus,
    Config,
    FocuserStatus,
    focuslynx_channel_config,
    focuslynx_channel_status,
    focuslynx_set_target_steps,
    focuslynx_stop,
    focuslynx_sync
)

# Set automatically when generating RPM package
SOFTWARE_VERSION = "UNKNOWN"

CHANNELS = [1, 2]

class FocusChannel:
    def __init__(self, controller, channel_number):
        self._controller = controller
        self._status_lock = threading.Lock()
        self._max_steps = 0
        self._channel_number = channel_number

        # State included in the status dictionary
        self._status = FocuserStatus.Disabled
        self._temperature = 0
        self._current_steps = 0
        self._target_steps = 0

        # Command requests from the user
        self._requested_steps = 0
        self._requested_stop = False
        self._requested_reset_home = False

        # Locks for blocking user commands
        self.move_lock = threading.Lock()
        self._idle_condition = threading.Condition()

    def set_initializing(self):
        """Set FocuserStatus.Initializing and clear other state"""
        with self._status_lock:
            self._status = FocuserStatus.Initializing
            self._temperature = self._current_steps = self._target_steps = 0

    def set_disabled(self):
        """Set FocuserStatus.Disabled and clear other state"""
        with self._status_lock:
            self._status = FocuserStatus.Disabled
            self._temperature = self._current_steps = self._target_steps = 0

    def update(self, port):
        # An error status disables the channel until the daemon restarts
        if self._status in [FocuserStatus.Error, FocuserStatus.Disconnected]:
            return

        # Acquire idle lock to avoid race conditions with the command threads
        self._idle_condition.acquire()
        with self._status_lock:
            try:
                reset_requested_steps = False
                report_stopped = False
                if self._status == FocuserStatus.Initializing:
                    config = focuslynx_channel_config(port, self._channel_number)
                    status = focuslynx_channel_status(port, self._channel_number)
                    if not status:
                        self._status = FocuserStatus.Disconnected

                    self._max_steps = config['max_steps']
                    reset_requested_steps = True

                    print('Channel {} ({}) is configured as type {} with {} steps'.format(
                        self._channel_number, config['nickname'], config['device_type'], self._max_steps))

                if self._requested_stop:
                    self._requested_stop = False
                    focuslynx_stop(port, self._channel_number)
                    reset_requested_steps = True
                    report_stopped = True

                if self._requested_reset_home:
                    focuslynx_sync(port, self._channel_number, self._max_steps // 2)
                    self._requested_reset_home = False
                    reset_requested_steps = True

                if not reset_requested_steps and self._status >= FocuserStatus.Idle and self._target_steps != self._requested_steps:
                    focuslynx_set_target_steps(port, self._channel_number, self._requested_steps + self._max_steps // 2)

                status = focuslynx_channel_status(port, self._channel_number)
                self._status = FocuserStatus.Moving if status['is_moving'] else FocuserStatus.Idle
                self._temperature = status['temperature']
                self._current_steps = status['current_steps'] - self._max_steps // 2
                self._target_steps = status['target_steps'] - self._max_steps // 2

                if reset_requested_steps:
                    self._requested_steps = self._target_steps

                if report_stopped:
                    message = 'Channel {} move stopped at {:+d}'.format(self._channel_number, self._current_steps)
                    print(message)
                    log.info(self._controller.config.log_name, message)

                # Wake up anything that might we waiting on the channel becoming idle
                if self._status == FocuserStatus.Idle:
                    self._idle_condition.notify_all()

            except Exception:
                print('error: Exception while updating channel {}.'.format(self._channel_number))
                traceback.print_exc(file=sys.stdout)
                log.error(self._controller.config.log_name, 'Exception while updating channel {}'.format(self._channel_number))
                self._status = FocuserStatus.Error
                self._temperature = self._current_steps = self._target_steps = 0

        # Release idle lock so the command threads can return
        self._idle_condition.release()

    def request_set_steps(self, steps, offset=False):
        """
        Request the channel to move to / by the requested steps
        Blocks until the move has completed or failed

        :param steps: Step position to move
        :param offset: Interpret steps as a relative move

        :return: CommandStatus describing the result of the request
        """
        with TryLock(self.move_lock) as success:
            if not success:
                return CommandStatus.Blocked

            with self._status_lock:
                if self._status < FocuserStatus.Idle:
                    return CommandStatus.ChannelNotAvailable

                if self._status != FocuserStatus.Idle:
                    return CommandStatus.Failed

                if offset:
                    steps += self._target_steps

                # Check step limits
                hard_limit = self._max_steps // 2 - 1
                if steps < self._controller.config.soft_step_limits[0] or steps > self._controller.config.soft_step_limits[1] \
                        or steps < -hard_limit or steps > hard_limit:
                    return CommandStatus.PositionOutsideLimits

                # Nothing to do if we are already there
                if self._requested_steps == steps:
                    return CommandStatus.Succeeded

                self._requested_steps = steps

            # Wake the main run loop to start moving immediately
            with self._controller.wait_condition:
                self._controller.wait_condition.notify_all()

            message = 'Requesting channel {} move to {:+d}'.format(self._channel_number, steps)
            print(message)
            log.info(self._controller.config.log_name, message)

            # Wait until the move has completed
            with self._idle_condition:
                self._idle_condition.wait(self._controller.config.move_timeout)

            with self._status_lock:
                if self._status != FocuserStatus.Idle or self._target_steps != steps:
                    message = 'Channel {} move failed'.format(self._channel_number)
                    print(message)
                    log.error(self._controller.config.log_name, message)
                    return CommandStatus.Failed

            message = 'Channel {} move complete'.format(self._channel_number)
            print(message)
            log.info(self._controller.config.log_name, message)
            return CommandStatus.Succeeded

    def request_reset_home(self):
        """
        Request the channel to reset the current position as the zero/home position
        Blocks until the move has completed or failed

        :return: CommandStatus describing the result of the request
        """
        with TryLock(self.move_lock) as success:
            if not success:
                return CommandStatus.Blocked

            with self._status_lock:
                if self._status != FocuserStatus.Idle:
                    return CommandStatus.ChannelNotAvailable

                self._requested_reset_home = True

            # Wake up the run loop
            with self._controller.wait_condition:
                self._controller.wait_condition.notify_all()

            message = 'Requesting channel {} home position reset'.format(self._channel_number)
            print(message)
            log.info(self._controller.config.log_name, message)

            # Wait until the move has completed
            with self._idle_condition:
                self._idle_condition.wait(self._controller.config.home_reset_timeout)

            with self._status_lock:
                if self._status != FocuserStatus.Idle or self._current_steps != 0:
                    message = 'Channel {} home position reset failed'.format(self._channel_number)
                    print(message)
                    log.error(self._controller.config.log_name, message)
                    return CommandStatus.Failed

            message = 'Channel {} home position reset complete'.format(self._channel_number)
            print(message)
            log.info(self._controller.config.log_name, message)
            return CommandStatus.Succeeded

    def request_stop(self):
        """
        Request the channel to stop moving

        :return: CommandStatus.Succeeded
        """
        # Skip the lock so we can stop ASAP
        # We are careful to avoid race conditions when used
        self._requested_stop = True

        message = 'Requesting channel {} stop moving'.format(self._channel_number)
        print(message)
        log.info(self._controller.config.log_name, message)
        return CommandStatus.Succeeded

    def status(self):
        with self._status_lock:
            return {
                'status': self._status,
                'status_label': FocuserStatus.label(self._status, False),
                'temperature': self._temperature,
                'current_steps': self._current_steps,
                'target_steps': self._target_steps,
                'requested_steps': self._requested_steps
            }


class FocusLynxDaemon:
    """Daemon interface for Optec Focus Lynx"""
    def __init__(self, config):
        self.wait_condition = threading.Condition()
        self.config = config

        self._request_connection = False
        self._status_lock = threading.Lock()
        self._status_date = datetime.datetime.utcnow()

        self._channels = [FocusChannel(self, c) for c in CHANNELS]
        self._channel_status = [c.status() for c in self._channels]

        self._port = None
        self._port_error = False

        runloop = threading.Thread(target=self.__run)
        runloop.daemon = True
        runloop.start()

    def __run(self):
        """Background thread managing communication over the serial connection"""
        while True:
            if self._request_connection and not self._port:
                # Connect to the focuser
                try:
                    for c in self._channels:
                        c.set_initializing()

                    self._port = serial.Serial(self.config.serial_port, self.config.serial_baud,
                                               timeout=self.config.serial_timeout)
                    print('Connected to', self.config.serial_port)
                    prefix = 'Restored' if self._port_error else 'Established'
                    log.info(self.config.log_name, prefix + ' serial connection to the focuser')
                    self._port_error = False

                    # Flush any stale state
                    self._port.flushInput()
                    self._port.flushOutput()

                except Exception as exception:
                    print(exception)
                    print('Will retry in 5 seconds...')
                    if not self._port_error:
                        log.error(self.config.log_name, 'Failed to connect to the focuser')

                    self._port_error = True
                    for c in self._channels:
                        c.set_disabled()

            if not self._request_connection:
                if self._port:
                    # Disconnect from focuser
                    self._port.close()
                    self._port = None

                with self._status_lock:
                    for c in self._channels:
                        if c.status != FocuserStatus.Disabled:
                            c.set_disabled()
                            self._status_date = datetime.datetime.utcnow()

            delay = self.config.idle_loop_delay
            if self._request_connection and self._port:
                try:
                    date = datetime.datetime.utcnow()

                    # Run the update loop for each channel
                    for c in self._channels:
                        c.update(self._port)

                    # Update the status exposed to consumers
                    # This is done as a separate step at the end to ensure that we can update
                    # the status for both channels at the same time without holding the status
                    # lock for longer than necessary.
                    with self._status_lock:
                        self._status_date = date
                        # Update channel status
                        self._channel_status = [c.status() for c in self._channels]

                        # Reduce polling time if any channels are still moving
                        if any([c['status'] == FocuserStatus.Moving for c in self._channel_status]):
                            delay = self.config.moving_loop_delay

                except Exception:
                    self._port.close()

                    with self._status_lock:
                        self._status_date = datetime.datetime.utcnow()
                        for c in self._channels:
                            c.set_disabled()

                    traceback.print_exc(file=sys.stdout)
                    print('Will retry in 5 seconds...')
                    if not self._port_error:
                        log.error(self.config.log_name, 'Lost serial connection to the focuser')
                    self._port_error = True

            # Wait for the next loop period unless woken up early by a command thread
            with self.wait_condition:
                self.wait_condition.wait(delay)

    @Pyro4.expose
    def report_status(self):
        """Returns a dictionary containing the current focuser state"""
        with self._status_lock:
            return {
                'date': datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ'),
                'software_version': SOFTWARE_VERSION,
                'channels': self._channel_status
            }

    @Pyro4.expose
    def set_focus(self, channel, steps, offset=False):
        """Request a focuser channel to move a specific step position"""
        if not pyro_client_matches(self.config.control_ips):
            return CommandStatus.InvalidControlIP

        if channel not in CHANNELS:
            return CommandStatus.InvalidChannel

        return self._channels[CHANNELS.index(channel)].request_set_steps(steps, offset)

    @Pyro4.expose
    def reset_home_position(self, channel):
        """Request a focuser channel to reset its home position to its current position"""
        if not pyro_client_matches(self.config.control_ips):
            return CommandStatus.InvalidControlIP

        if channel not in CHANNELS:
            return CommandStatus.InvalidChannel

        return self._channels[CHANNELS.index(channel)].request_reset_home()

    @Pyro4.expose
    def stop_channel(self, channel):
        """Stop any in progress movement"""
        if not pyro_client_matches(self.config.control_ips):
            return CommandStatus.InvalidControlIP

        if channel not in CHANNELS:
            return CommandStatus.InvalidChannel

        return self._channels[CHANNELS.index(channel)].request_stop()

    @Pyro4.expose
    def initialize(self):
        """Connects to the focuser hardware"""
        if not pyro_client_matches(self.config.control_ips):
            return CommandStatus.InvalidControlIP

        locked = []
        try:
            for c in self._channels:
                success = c.move_lock.acquire(False)
                if not success:
                    return CommandStatus.Blocked

                locked.append(c.move_lock)

            if self._request_connection:
                return CommandStatus.NotDisconnected

            self._request_connection = True

            # Wake up the run loop
            with self.wait_condition:
                self.wait_condition.notify_all()

        except Exception:
            return CommandStatus.Failed
        finally:
            for lock in locked:
                lock.release()
        return CommandStatus.Succeeded

    @Pyro4.expose
    def shutdown(self):
        """Disconnects from the focuser hardware"""
        if not pyro_client_matches(self.config.control_ips):
            return CommandStatus.InvalidControlIP

        locked = []
        try:
            for c in self._channels:
                success = c.move_lock.acquire(False)
                if not success:
                    return CommandStatus.Blocked

                locked.append(c.move_lock)

            if not self._request_connection:
                return CommandStatus.NotConnected

            self._request_connection = False

            # Wake up the run loop
            with self.wait_condition:
                self.wait_condition.notify_all()

        except Exception:
            return CommandStatus.Failed
        finally:
            for lock in locked:
                lock.release()
        return CommandStatus.Succeeded


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Focus Server')
    parser.add_argument('config', help='Path to configuration json file')
    args = parser.parse_args()
    _config = Config(args.config)
    _config.daemon.launch(FocusLynxDaemon(_config))
