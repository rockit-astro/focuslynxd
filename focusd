#!/usr/bin/env python3.6
#
# This file is part of rasa-focusd.
#
# rasa-focusd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rasa-focusd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rasa-focusd.  If not, see <http://www.gnu.org/licenses/>.

"""Daemon for controlling an Optec Focus Lynx focuser via Pyro"""

# pylint: disable=too-many-return-statements
# pylint: disable=too-many-branches

import datetime
import sys
import threading
import time
import traceback
import serial
import Pyro4
from warwick.observatory.common import (
    daemons,
    IP,
    log,
    TryLock)
from warwick.observatory.common.helpers import pyro_client_matches
from warwick.rasa.focuser import CommandStatus, FocuserStatus

# Set automatically when generating RPM package
SOFTWARE_VERSION = "UNKNOWN"

SERIAL_PORT = '/dev/focuser'
SERIAL_BAUD = 115200
SERIAL_TIMEOUT = 5

LOG_NAME = 'rasa_focusd'

CONTROL_IPS = [IP.RASAMain]

CHANNELS = [1, 2]

# Delay between focuser queries (in seconds)
IDLE_LOOP_DELAY = 5.0
MOVING_LOOP_DELAY = 0.5

# Limit focuser movements to a smaller range around central focus
# These must be set smaller than half of the hardware step range
# TODO: These need to be calibrated based on real telescope tests
MOVEMENT_SOFT_LIMITS = [-50000, 50000]

# Maximum time (in seconds) that any move command should take
MOVEMENT_TIMEOUT = 180

# Maximum time that it should take to reset the home position
HOME_POSITION_RESET_TIMEOUT = 2

FOCUSER_ERROR = {
    'status': FocuserStatus.Error,
    'status_label': FocuserStatus.label(FocuserStatus.Error, False)
}

FOCUSER_DISCONNECTED = {
    'status': FocuserStatus.Disconnected,
    'status_label': FocuserStatus.label(FocuserStatus.Disconnected, False)
}

class FocusLynxDaemon:
    """Daemon interface for Optec Focus Lynx"""
    def __init__(self):
        self._wait_condition = threading.Condition()
        self._status_lock = threading.Lock()
        self._status_date = datetime.datetime.utcnow()
        self._status = [FOCUSER_DISCONNECTED for _ in CHANNELS]

        self._max_steps = [0 for _ in CHANNELS]
        self._request_steps = [0 for _ in CHANNELS]
        self._request_stop = [False for _ in CHANNELS]
        self._request_reset_home = [False for _ in CHANNELS]

        self._move_locks = [threading.Lock() for _ in CHANNELS]
        self._idle_conditions = [threading.Condition() for _ in CHANNELS]

        self._port = None
        self._port_error = False

        runloop = threading.Thread(target=self.__run)
        runloop.daemon = True
        runloop.start()

    def __query_config(self, channel):
        """Query the configuration for a focuser channel.
           The channel is set to the error state if the configuration
           is not as expected:
              Temperature compensation off
              Temperature compensation at start off
              Backlash off (we may want to turn this on later)

           Returns the maximum steps allowed for the channel or None on error
        """
        try:
            # Clear any stray data in the input buffer
            self._port.flushInput()

            self._port.write('<F{:1d}GETCONFIG>'.format(channel).encode('ascii'))
            line = self._port.readline()
            if line != b'!\n':
                print('error: Unexpected data returned from focuser.')
                print('Expected `!`, got `{}`'.format(line))
                return None

            line = self._port.readline()
            expected = 'CONFIG{:1d}\n'.format(channel).encode('ascii')
            if line != expected:
                print('error: Unexpected data returned from focuser.')
                print('Expected `{}`, got `{}`'.format(expected, line))
                return None

            line = self._port.readline()
            if not line.startswith(b'Nickname ='):
                print('error: Unexpected data returned from focuser.')
                print('Expected `Nickname = ...`, got `{}`'.format(line))
                return None
            nickname = line[10:].decode('ascii').strip()

            line = self._port.readline()
            if not line.startswith(b'Max Pos  ='):
                print('error: Unexpected data returned from focuser.')
                print('Expected `Max Pos  = ...`, got `{}`'.format(line))
                return None
            max_steps = int(line[10:])

            line = self._port.readline()
            if not line.startswith(b'Dev Typ  ='):
                print('error: Unexpected data returned from focuser.')
                print('Expected `Dev Typ  = ...`, got `{}`'.format(line))
                return None
            devicetype = line[10:].decode('ascii').strip()

            print('Channel {} ({}) is configured as type {} with {} steps'.format(
                channel, nickname, devicetype, max_steps))

            line = self._port.readline()
            if line != b'TComp ON = 0\n':
                print('error: Unexpected data returned from focuser.')
                print('Expected `TComp ON = 0`, got `{}`'.format(line))
                return None

            # Skip temperature compensation lines
            for _ in range(6):
                self._port.readline()

            line = self._port.readline()
            if line != b'BLC En   = 0\n':
                print('error: Unexpected data returned from focuser.')
                print('Expected `BLC En   = 0`, got `{}`'.format(line))
                return None

            # Skip backlash size, LED brightness
            for _ in range(2):
                self._port.readline()

            line = self._port.readline()
            if line != b'TC@Start = 0\n':
                print('error: Unexpected data returned from focuser.')
                print('Expected `TC@Start = 0`, got `{}`'.format(line))
                return None

            line = self._port.readline()
            if line != b'END\n':
                print('error: Unexpected data returned from focuser.')
                print('Expected `END`, got `{}`'.format(line))
                return None

            return max_steps
        except Exception:
            print('error: Exception while querying channel {} configuration.'.format(channel))
            traceback.print_exc(file=sys.stdout)
            return None

    def __query_status(self, channel):
        """Query the status from a focuser channel
            Returns a state dictionary."""
        try:
            # Clear any stray data in the input buffer
            self._port.flushInput()

            self._port.write('<F{:1d}GETSTATUS>'.format(channel).encode('ascii'))
            line = self._port.readline()
            if line != b'!\n':
                print('error: Unexpected data returned from focuser.')
                print('Expected `!`, got `{}`'.format(line))
                return FOCUSER_ERROR

            line = self._port.readline()
            expected = 'STATUS{:1d}\n'.format(channel).encode('ascii')
            if line != expected:
                print('error: Unexpected data returned from focuser.')
                print('Expected `{}`, got `{}`'.format(expected, line))
                return FOCUSER_ERROR

            line = self._port.readline()
            if not line.startswith(b'Temp(C)  ='):
                print('error: Unexpected data returned from focuser.')
                print('Expected `Temp(C)  = ...`, got `{}`'.format(line))
                return FOCUSER_ERROR

            # Use the temperature probe as a proxy for the entire focuser
            if line[10:] == b' NP\n':
                # Skip remaining lines
                for _ in range(11):
                    self._port.readline()

                return FOCUSER_DISCONNECTED

            temp = float(line[10:])

            line = self._port.readline()
            if not line.startswith(b'Curr Pos ='):
                print('error: Unexpected data returned from focuser.')
                print('Expected `Curr Pos = ...`, got `{}`'.format(line))
                return FOCUSER_ERROR
            current = int(line[10:])

            line = self._port.readline()
            if not line.startswith(b'Targ Pos ='):
                print('error: Unexpected data returned from focuser.')
                print('Expected `Targ Pos = ...`, got `{}`'.format(line))
                return FOCUSER_ERROR
            target = int(line[10:])

            line = self._port.readline()
            if not line.startswith(b'IsMoving ='):
                print('error: Unexpected data returned from focuser.')
                print('Expected `IsMoving = ...`, got `{}`'.format(line))
                return FOCUSER_ERROR
            is_moving = int(line[10:]) == 1

            #  Skip unused lines:
            #   IsHoming, IsHomed, FFDetect, TmpProbe
            #   RemoteIO, Hnd Ctlr, Reverse
            for _ in range(7):
                self._port.readline()

            line = self._port.readline()
            if line != b'END\n':
                print('error: Unexpected data returned from focuser.')
                print('Expected `END`, got `{}`'.format(line))
                return FOCUSER_ERROR

            offset = self._max_steps[CHANNELS.index(channel)] // 2
            status = FocuserStatus.Moving if is_moving else FocuserStatus.Idle
            return {
                'status': status,
                'status_label': FocuserStatus.label(status, False),
                'temperature': temp,
                'current_steps': current - offset,
                'target_steps': target - offset,
            }
        except Exception:
            print('error: Exception while querying channel {} status.'.format(channel))
            traceback.print_exc(file=sys.stdout)
            return FOCUSER_ERROR

    def __set_target_steps(self, channel, steps):
        """Commands the given focuser channel to move to the given absolute position
           Returns True on successful command, False on error.
        """
        try:
            # Clear any stray data in the input buffer
            self._port.flushInput()

            offset = self._max_steps[CHANNELS.index(channel)] // 2
            self._port.write('<F{:1d}MA{:06d}>'.format(channel, steps + offset).encode('ascii'))
            line = self._port.readline()
            if line != b'!\n':
                print('error: Unexpected data returned from focuser.')
                print('Expected `!`, got `{}`'.format(line))
                return False

            line = self._port.readline()
            if line != b'M\n':
                print('error: Unexpected data returned from focuser.')
                print('Expected `M`, got `{}`'.format(line))
                return False
            return True
        except Exception:
            print('error: Exception while setting channel {} position.'.format(channel))
            traceback.print_exc(file=sys.stdout)
            return False

    def __stop_channel(self, channel):
        """Issues a stop command to the given focuser channel.
           Returns True on successful command, False on error.
        """
        try:
            # Clear any stray data in the input buffer
            self._port.flushInput()

            self._port.write('<F{:1d}HALT>'.format(channel).encode('ascii'))
            line = self._port.readline()
            if line != b'!\n':
                print('error: Unexpected data returned from focuser.')
                print('Expected `!`, got `{}`'.format(line))
                return False

            line = self._port.readline()
            if line != b'HALTED\n':
                print('error: Unexpected data returned from focuser.')
                print('Expected `HALTED`, got `{}`'.format(line))
                return False
            return True
        except Exception:
            print('error: Exception while stopping channel {} movement.'.format(channel))
            traceback.print_exc(file=sys.stdout)
            return False

    def __set_home_position(self, channel):
        """Resets the channel step range so that the current position
           is half way through the allowed range, repored at 0 to the user.
           Returns True on successful command, false on error.
        """
        try:
            # Clear any stray data in the input buffer
            self._port.flushInput()

            # Set the current position to the range midpoint
            midpoint = self._max_steps[CHANNELS.index(channel)] // 2
            self._port.write('<F{:1d}SCCP{:06d}>'.format(channel, midpoint).encode('ascii'))
            line = self._port.readline()
            if line != b'!\n':
                print('error: Unexpected data returned from focuser.')
                print('Expected `!`, got `{}`'.format(line))
                return False

            return True
        except Exception:
            print('error: Exception while setting channel {} home position.'.format(channel))
            traceback.print_exc(file=sys.stdout)
            return False

    def __run(self):
        """Background thread managing communication over the serial connection"""
        while True:
            # Initial setup
            try:
                self._port = serial.Serial(SERIAL_PORT, SERIAL_BAUD,
                                           timeout=SERIAL_TIMEOUT)
                print('Connected to', SERIAL_PORT)
                prefix = 'Restored' if self._port_error else 'Established'
                log.info(LOG_NAME, prefix + ' serial connection to the focuser')
                self._port_error = False
            except Exception as exception:
                print(exception)
                print('Will retry in 10 seconds...')
                if not self._port_error:
                    log.error(LOG_NAME, 'Failed to connect to the focuser')

                self._port_error = True

                time.sleep(10.)
                continue

            try:
                # Flush any stale state
                self._port.flushInput()
                self._port.flushOutput()

                # Query channel config on startup
                for i, channel in enumerate(CHANNELS):
                    max_steps = self.__query_config(channel)
                    if max_steps is None:
                        self._status[i]['status'] = FocuserStatus.Error
                        self._status[i]['status_label'] = FocuserStatus.label(FocuserStatus.Error,
                                                                              False),
                    else:
                        self._max_steps[i] = max_steps

                # Main run loop
                while True:
                    date = datetime.datetime.utcnow()
                    status = [FOCUSER_ERROR, FOCUSER_ERROR]

                    # Acquire idle locks to avoid race conditions with the command threads
                    for i, channel in enumerate(CHANNELS):
                        self._idle_conditions[i].acquire()

                    # Run the update loop for each channel
                    for i, channel in enumerate(CHANNELS):
                        # An error status disables the channel until the daemon restarts
                        if self._status[i]['status'] == FocuserStatus.Error:
                            continue

                        if self._request_stop[i]:
                            if self.__stop_channel(channel):
                                self._request_stop[i] = False

                                # Query the status so we can reset the requested steps
                                status[i] = self.__query_status(channel)
                                self._request_steps[i] = status[i]['target_steps']
                                message = 'Channel {} move stopped at {:+d}'.format(
                                    channel, status[i]['target_steps'])
                                print(message)
                                log.info(LOG_NAME, message)
                            else:
                                message = 'Channel {} move failed to stop'.format(channel)
                                print(message)
                                log.error(LOG_NAME, message)

                                # Skipping the query below keeps the channel in the error state
                                continue
                        else:
                            status[i] = self.__query_status(channel)

                        # First query after a restart sets the requested steps
                        # to avoid unnecessary movements
                        if self._status[i]['status'] == FocuserStatus.Disconnected \
                                and status[i]['status'] > FocuserStatus.Error:
                            self._request_steps[i] = status[i]['target_steps']

                        if self._request_reset_home[i]:
                            self.__set_home_position(channel)
                            self._request_steps[i] = 0
                            self._request_reset_home[i] = False
                            status[i] = self.__query_status(channel)

                        # Atomic read, so don't need a lock
                        request_steps = self._request_steps[i]

                        if status[i]['status'] >= FocuserStatus.Idle and \
                                status[i]['target_steps'] != request_steps:
                            if self.__set_target_steps(channel, request_steps):
                                # Refresh the status to include the move command
                                status[i] = self.__query_status(channel)
                            else:
                                status[i] = FOCUSER_ERROR

                    # Update the status exposed to consumers
                    # This is done as a separate step at the end to ensure that we can update
                    # the status for both channels at the same time without holding the status
                    # lock for longer than necessary.
                    delay = IDLE_LOOP_DELAY
                    with self._status_lock:
                        self._status_date = date
                        for i, _ in enumerate(CHANNELS):
                            # Update channel status
                            self._status[i] = status[i]

                            # Reduce polling time if any channels are still moving
                            if status[i]['status'] == FocuserStatus.Moving:
                                delay = MOVING_LOOP_DELAY

                            # Wake up anything that might we waiting on the channel becoming idle
                            if status[i]['status'] == FocuserStatus.Idle:
                                self._idle_conditions[i].notify_all()

                    # Release idle locks so the command threads can return
                    for i, channel in enumerate(CHANNELS):
                        self._idle_conditions[i].release()

                    # Wait for the next loop period unless woken up early by a command thread
                    with self._wait_condition:
                        self._wait_condition.wait(delay)
            except Exception as exception:
                self._port.close()

                with self._status_lock:
                    self._status_date = datetime.datetime.utcnow()
                    self._status = [FOCUSER_ERROR, FOCUSER_ERROR]

                traceback.print_exc(file=sys.stdout)
                print('Will retry in 10 seconds...')
                if not self._port_error:
                    log.error(LOG_NAME, 'Lost serial connection to the focuser')
                self._port_error = True
                time.sleep(10.)

    @Pyro4.expose
    def report_status(self):
        """Returns a dictionary containing the current focuser state"""
        with self._status_lock:
            return {
                'date': datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ'),
                'software_version': SOFTWARE_VERSION,
                'channels': self._status
            }

    @Pyro4.expose
    def set_focus(self, channel, steps, offset=False):
        """Request a focuser channel to move a specific step position"""
        if not pyro_client_matches(CONTROL_IPS):
            return CommandStatus.InvalidControlIP

        if channel not in CHANNELS:
            return CommandStatus.InvalidChannel

        i = CHANNELS.index(channel)
        with TryLock(self._move_locks[i]) as success:
            if not success:
                return CommandStatus.Blocked

            with self._status_lock:
                if self._status[i]['status'] < FocuserStatus.Idle:
                    return CommandStatus.ChannelNotAvailable

                if self._status[i]['status'] != FocuserStatus.Idle:
                    return CommandStatus.Failed

                if offset:
                    steps += self._status[i]['target_steps']

            # Check step limits
            hard_limit = self._max_steps[i] // 2 - 1
            if steps < MOVEMENT_SOFT_LIMITS[0] or steps > MOVEMENT_SOFT_LIMITS[1] \
                    or steps < -hard_limit or steps > hard_limit:
                return CommandStatus.PositionOutsideLimits

            # Nothing to do if we are already there
            if self._request_steps[i] == steps:
                return CommandStatus.Succeeded

            self._request_steps[i] = steps

            # Wake up the run loop to start moving immediately
            with self._wait_condition:
                self._wait_condition.notify_all()

            print('Requesting channel {} move to {:+d}'.format(channel, steps))
            log.info(LOG_NAME, 'Requesting channel {} move to {:+d}'.format(channel, steps))

            # Wait until the move has completed
            with self._idle_conditions[i]:
                self._idle_conditions[i].wait(MOVEMENT_TIMEOUT)

            with self._status_lock:
                if self._status[i]['status'] != FocuserStatus.Idle or \
                        self._status[i]['target_steps'] != steps:
                    message = 'Channel {} move failed'.format(channel)
                    print(message)
                    log.error(LOG_NAME, message)
                    return CommandStatus.Failed

            print('Channel {} move complete'.format(channel))
            log.info(LOG_NAME, 'Channel {} move complete'.format(channel))
            return CommandStatus.Succeeded

    @Pyro4.expose
    def reset_home_position(self, channel):
        """Request a focuser channel to reset its home position to its current position"""
        if not pyro_client_matches(CONTROL_IPS):
            return CommandStatus.InvalidControlIP

        if channel not in CHANNELS:
            return CommandStatus.InvalidChannel

        i = CHANNELS.index(channel)
        with TryLock(self._move_locks[i]) as success:
            if not success:
                return CommandStatus.Blocked

            with self._status_lock:
                if self._status[i]['status'] != FocuserStatus.Idle:
                    return CommandStatus.ChannelNotAvailable

            self._request_reset_home[i] = True

            # Wake up the run loop
            with self._wait_condition:
                self._wait_condition.notify_all()

            message = 'Requesting channel {} home position reset'.format(channel)
            print(message)
            log.info(LOG_NAME, message)

            # Wait until the move has completed
            with self._idle_conditions[i]:
                self._idle_conditions[i].wait(HOME_POSITION_RESET_TIMEOUT)

            with self._status_lock:
                if self._status[i]['status'] != FocuserStatus.Idle or \
                        self._status[i]['current_steps'] != 0:
                    message = 'Channel {} home position reset failed'.format(channel)
                    print(message)
                    log.error(LOG_NAME, message)
                    return CommandStatus.Failed

            message = 'Channel {} home position reset complete'.format(channel)
            print(message)
            log.info(LOG_NAME, message)
            return CommandStatus.Succeeded

    @Pyro4.expose
    def stop_channel(self, channel):
        """Stop any in progress movement"""
        if not pyro_client_matches(CONTROL_IPS):
            return CommandStatus.InvalidControlIP

        if channel not in CHANNELS:
            return CommandStatus.InvalidChannel

        i = CHANNELS.index(channel)
        self._request_stop[i] = True

        message = 'Requesting channel {} stop moving'.format(channel)
        print(message)
        log.info(LOG_NAME, message)

        return CommandStatus.Succeeded

if __name__ == '__main__':
    daemons.rasa_focus.launch(FocusLynxDaemon())
