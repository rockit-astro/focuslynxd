#!/usr/bin/env python3.6
#
# This file is part of focuslynxd.
#
# focuslynxd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# focuslynxd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with focuslynxd.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for controlling an Optec Focus Lynx focuser"""

import datetime
import glob
import json
import os
import sys
import Pyro4
from warwick.observatory.common import TFmt
from warwick.observatory.focuslynx import Config, CommandStatus, FocuserStatus


SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook

CHANNELS = [1, 2]
CHANNELS_ARG_STRING = '1|2'


def run_command(command, args):
    """Runs a daemon command, handling error messages"""
    if 'FOCUSD_CONFIG_PATH' in os.environ:
        config = Config(os.environ['FOCUSD_CONFIG_PATH'])
    else:
        # Load the config file defined in the PIPELINED_CONFIG_PATH environment variable or from the
        # default system location (/etc/pipelined/). Exit with an error if zero or multiple are found.
        files = glob.glob("/etc/focusd/*.json")
        if len(files) != 1:
            print('error: failed to guess the default config file. ' +
                  'Run as FOCUSD_CONFIG_PATH=/path/to/config.json pipeline <command>')
            return 1

        config = Config(files[0])

    try:
        ret = command(config, args)
    except Pyro4.errors.CommunicationError:
        ret = -101

    # Print message associated with error codes, except for -1 (error handled locally)
    if ret not in [-1, 0]:
        print(CommandStatus.message(ret))
    sys.exit(ret)


def print_status(config, _):
    """Prints a human-readable summary of the focuser status"""
    with config.daemon.connect() as focusd:
        data = focusd.report_status()

    if data is not None:
        date = datetime.datetime.strptime(data['date'], '%Y-%m-%dT%H:%M:%SZ')
        print('Data received ' + TFmt.Bold + str(date) + TFmt.Clear + ':')
        for i in [0, 1]:
            channel = data['channels'][i]
            label = 'Channel {}: '.format(i+1)
            if channel['status'] < FocuserStatus.Idle:
                print(label + FocuserStatus.label(channel['status'], True))
                continue

            label += TFmt.Bold + (TFmt.Yellow if channel['status'] == FocuserStatus.Moving else '')
            label += '{:+7d}'.format(channel['current_steps']) + TFmt.Clear + ' steps'
            if channel['status'] == FocuserStatus.Moving:
                label += ' (moving to ' + TFmt.Bold + '{:+7d}'.format(channel['target_steps'])
                label += TFmt.Clear + ' steps)'

            label += TFmt.Bold + ', {:.1f}'.format(channel['temperature']) + TFmt.Clear + '\u00B0C'
            print(label)
    return 0


def print_json(config, _):
    """Prints a machine-readable summary of the focuser status"""
    with config.daemon.connect() as focusd:
        print(json.dumps(focusd.report_status() or {}))

    return 0


def set_position(config, args):
    """Request a focuser channel to move a specific step position"""
    try:
        if len(args) == 2 and int(args[0]) in CHANNELS:
            channel = int(args[0])
            position = int(args[1])

            try:
                with config.daemon.connect(timeout=0) as focusd:
                    return focusd.set_focus(channel, position)
            except KeyboardInterrupt:
                # ctrl-c terminates the running command
                with config.daemon.connect() as focusd:
                    return focusd.stop_channel(channel)
    except ValueError:
        pass
    print('usage: {} set ({}) <step position>'.format(SCRIPT_NAME, CHANNELS_ARG_STRING))
    return -1


def offset_position(config, args):
    """Request a focuser channel to move by a specific step delta"""
    try:
        if len(args) == 2 and int(args[0]) in CHANNELS:
            channel = int(args[0])
            delta = int(args[1])

            try:
                with config.daemon.connect(timeout=0) as focusd:
                    return focusd.set_focus(channel, delta, offset=True)
            except KeyboardInterrupt:
                # ctrl-c terminates the running command
                with config.daemon.connect() as focusd:
                    return focusd.stop_channel(channel)
    except ValueError:
        pass
    print('usage: {} offset ({}) <step delta>'.format(SCRIPT_NAME, CHANNELS_ARG_STRING))
    return -1


def stop(config, args):
    """Stop a focuser channel"""
    try:
        if len(args) == 1 and int(args[0]) in CHANNELS:
            with config.daemon.connect() as focusd:
                return focusd.stop_channel(int(args[0]))
    except ValueError:
        pass

    print('usage: {} stop ({})'.format(SCRIPT_NAME, CHANNELS_ARG_STRING))
    return -1


def set_home_position(config, args):
    """Sets the current focuser position to the home position"""
    try:
        if len(args) == 1 and int(args[0]) in CHANNELS:
            with config.daemon.connect() as focusd:
                return focusd.reset_home_position(int(args[0]))
    except ValueError:
        pass

    print('usage: {} zero ({})'.format(SCRIPT_NAME, CHANNELS_ARG_STRING))
    return -1


def initialize(config, _):
    """Connect to the focuser"""
    with config.daemon.connect() as focusd:
        return focusd.initialize()


def shutdown(config, _):
    """Disconnect from the focuser"""
    with config.daemon.connect() as focusd:
        return focusd.shutdown()


def print_usage():
    """Prints the utility help"""
    print('usage: {} <command> [<args>]'.format(SCRIPT_NAME))
    print()
    print('general commands:')
    print('   set          request the focuser to move to a given absolute position')
    print('   offset       request the focuser to move by a given offset delta')
    print('   stop         request the focuser to stop moving')
    print('   status       print a human-readable summary of the focuser status')
    print('   json         print a machine-readable summary of the focuser status')
    print('engineering commands:')
    print('   zero         sets the current focuser position to the home position')
    print('   init         connect to the focuser')
    print('   kill         disconnect from the focuser')
    print()

    return 0


if __name__ == '__main__':
    commands = {
        'set': set_position,
        'offset': offset_position,
        'stop': stop,
        'status': print_status,
        'json': print_json,
        'zero': set_home_position,
        'init': initialize,
        'kill': shutdown
    }

    if len(sys.argv) >= 2 and sys.argv[1] in commands:
        sys.exit(run_command(commands[sys.argv[1]], sys.argv[2:]))

    sys.exit(print_usage())
